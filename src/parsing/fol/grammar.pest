// Grammar for two-sorted target language (specifications, lemmas, user guides, etc.).
// X$i denotes variable X of sort integer, X$g denotes variable of sort general.
// Unsorted variables are assumed to be of sort general.
// Distinguishes between integer and general terms, variables, etc.
// Both of these are distinct from program terms, variables, etc.
// This language is NOT a subset of TPTP BNF, but formulas written in this language.
// can be transformed into TPTP formulas (Vampire-compatible input).

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "%" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }

keyword = _{ primitive | binary_connective | unary_connective | quantifier }

    primitive = _{ infimum | supremum }
        infimum  = { "#inf" }
        supremum = { "#sup" }

    binary_connective = _{ equivalence | implication | reverse_implication | conjunction | disjunction }
        equivalence         = { "<->" }
        implication         = { "->"  }
        reverse_implication = { "<-"  }
        conjunction         = { "and" }
        disjunction         = { "or"  }

    unary_connective = _{ negation }
        negation = { "not" }

    quantifier = _{ forall | exists }
        forall = { "forall" }
        exists = { "exists" }

    sort = { integer_sort | general_sort }
        integer_sort = { "i" }
        general_sort = { "g" }

basic_integer_term = { numeral | integer_variable | infimum | supremum }
    numeral           = @{ ("0") | ("-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
    unsorted_variable = @{ "_"? ~ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }
    integer_variable  = ${ (unsorted_variable ~ "$" ~ integer_sort) | !(unsorted_variable ~ "$" ~ sort) ~ (unsorted_variable ~ "$") }

unary_operator = _{ negative }
    negative = { !numeral ~ "-" }

function_symbol = _{ absolute }
    absolute = { "abs" }

binary_operator = _{ add | subtract | multiply }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }

integer_term = { unary_operator* ~ n_primary ~ (binary_operator ~ unary_operator* ~ n_primary)* }
    n_primary = _{ basic_integer_term | function | "(" ~ integer_term ~ ")" }
    function  = { function_symbol ~ "(" ~ integer_term ~ ("," ~ integer_term)? ~ ")" }

general_term = { integer_term | symbolic_constant | general_variable }
    symbolic_constant = @{ !keyword ~ "_"? ~ ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "_")* }
    general_variable  = ${ unsorted_variable ~ ("$" ~ general_sort)? }

variable = { integer_variable | general_variable }

predicate = { predicate_symbol ~ "/" ~ arity }
    predicate_symbol  = _{ symbolic_constant }
    arity =  @{ ("0") | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

atom = { predicate_symbol ~ term_tuple? }
    term_tuple = _{ "(" ~ (general_term ~ ("," ~ general_term)*)? ~ ")" }

relation = { greater_equal | less_equal | greater | less | not_equal | equal }
    greater_equal = { ">=" }
    less_equal    = { "<=" }
    greater       = { ">"  }
    less          = { "<"  }
    not_equal     = { "!=" }
    equal         = { "="  }

guard = { relation ~ general_term }

atomic_formula = { truth | falsity | comparison | atom }
    truth      = { "#true" }
    falsity    = { "#false" }
    comparison = { general_term ~ guard+ }

quantification = { quantifier ~ variable+ }

formula = { prefix* ~ primary ~ (infix ~ prefix* ~ primary)* }
    prefix  = _{ quantification | unary_connective }
    infix   = _{ binary_connective }
    primary = _{ "(" ~ formula ~ ")" | atomic_formula }

// TODO: Think about a proper way to handle the whitespace at the end of programs
theory = { (formula ~ ".")* ~ WHITESPACE* }
